{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            '/HOME/scz0bcb/run/mmdetection/configs/ballon/resnet50-0676ba61.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = '/HOME/scz0bcb/run/balloon_dataset/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/HOME/scz0bcb/run/balloon_dataset/train_annotation/transfer_train.json',\n        img_prefix='/HOME/scz0bcb/run/balloon_dataset/train',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/HOME/scz0bcb/run/balloon_dataset/val_annotation/transfer_val.json',\n        img_prefix='/HOME/scz0bcb/run/balloon_dataset/val',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/HOME/scz0bcb/run/balloon_dataset/val_annotation/transfer_val.json',\n        img_prefix='/HOME/scz0bcb/run/balloon_dataset/val',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/HOME/scz0bcb/run/mmdetection/configs/checkpoints/mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/balloon_result'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1801784985, "exp_name": "mask_rcnn_balloon.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 5e-05, "memory": 3764, "data_time": 0.32112, "loss_rpn_cls": 0.07091, "loss_rpn_bbox": 0.01693, "loss_cls": 0.71939, "acc": 43.14453, "loss_bbox": 0.31151, "loss_mask": 13.78675, "loss": 14.90549, "time": 0.82721}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0001, "memory": 3764, "data_time": 0.01298, "loss_rpn_cls": 0.04462, "loss_rpn_bbox": 0.01792, "loss_cls": 0.54928, "acc": 85.26367, "loss_bbox": 0.27, "loss_mask": 4.47354, "loss": 5.35537, "time": 0.18075}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00015, "memory": 3764, "data_time": 0.01138, "loss_rpn_cls": 0.05188, "loss_rpn_bbox": 0.01474, "loss_cls": 0.36925, "acc": 92.68555, "loss_bbox": 0.2711, "loss_mask": 0.60561, "loss": 1.31257, "time": 0.17765}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.028, "bbox_mAP_50": 0.0559, "bbox_mAP_75": 0.0252, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.027, "bbox_mAP_l": 0.0356, "bbox_mAP_copypaste": "0.0280 0.0559 0.0252 0.0000 0.0270 0.0356", "segm_mAP": 0.0068, "segm_mAP_50": 0.0287, "segm_mAP_75": 0.0, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0098, "segm_mAP_l": 0.0393, "segm_mAP_copypaste": "0.0068 0.0287 0.0000 0.0000 0.0098 0.0393"}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0002, "memory": 3764, "data_time": 0.24236, "loss_rpn_cls": 0.08089, "loss_rpn_bbox": 0.02941, "loss_cls": 0.28016, "acc": 91.60156, "loss_bbox": 0.30078, "loss_mask": 0.40269, "loss": 1.09393, "time": 0.42108}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.00025, "memory": 3766, "data_time": 0.01578, "loss_rpn_cls": 0.02939, "loss_rpn_bbox": 0.02373, "loss_cls": 0.31618, "acc": 87.57812, "loss_bbox": 0.47158, "loss_mask": 0.31938, "loss": 1.16026, "time": 0.19775}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.0003, "memory": 3766, "data_time": 0.00992, "loss_rpn_cls": 0.0318, "loss_rpn_bbox": 0.00763, "loss_cls": 0.19908, "acc": 92.51953, "loss_bbox": 0.28315, "loss_mask": 0.16593, "loss": 0.68758, "time": 0.1764}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00031, "bbox_mAP": 0.3337, "bbox_mAP_50": 0.4787, "bbox_mAP_75": 0.4072, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1815, "bbox_mAP_l": 0.4178, "bbox_mAP_copypaste": "0.3337 0.4787 0.4072 0.0000 0.1815 0.4178", "segm_mAP": 0.3872, "segm_mAP_50": 0.4719, "segm_mAP_75": 0.4555, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1279, "segm_mAP_l": 0.6187, "segm_mAP_copypaste": "0.3872 0.4719 0.4555 0.0000 0.1279 0.6187"}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.00036, "memory": 3890, "data_time": 0.24477, "loss_rpn_cls": 0.02368, "loss_rpn_bbox": 0.0111, "loss_cls": 0.22442, "acc": 89.64844, "loss_bbox": 0.39075, "loss_mask": 0.13935, "loss": 0.7893, "time": 0.43176}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.00041, "memory": 3890, "data_time": 0.01457, "loss_rpn_cls": 0.02441, "loss_rpn_bbox": 0.01668, "loss_cls": 0.22236, "acc": 89.24805, "loss_bbox": 0.39564, "loss_mask": 0.16992, "loss": 0.82902, "time": 0.19563}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.00046, "memory": 3890, "data_time": 0.01329, "loss_rpn_cls": 0.01842, "loss_rpn_bbox": 0.01853, "loss_cls": 0.2119, "acc": 88.30078, "loss_bbox": 0.41862, "loss_mask": 0.16544, "loss": 0.83292, "time": 0.18048}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00046, "bbox_mAP": 0.5763, "bbox_mAP_50": 0.7563, "bbox_mAP_75": 0.6868, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4726, "bbox_mAP_l": 0.6673, "bbox_mAP_copypaste": "0.5763 0.7563 0.6868 0.0000 0.4726 0.6673", "segm_mAP": 0.6693, "segm_mAP_50": 0.7507, "segm_mAP_75": 0.7285, "segm_mAP_s": 0.0052, "segm_mAP_m": 0.4236, "segm_mAP_l": 0.766, "segm_mAP_copypaste": "0.6693 0.7507 0.7285 0.0052 0.4236 0.7660"}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00051, "memory": 3890, "data_time": 0.23741, "loss_rpn_cls": 0.01154, "loss_rpn_bbox": 0.01446, "loss_cls": 0.19669, "acc": 88.60352, "loss_bbox": 0.44062, "loss_mask": 0.12839, "loss": 0.79169, "time": 0.41913}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.00056, "memory": 3931, "data_time": 0.01305, "loss_rpn_cls": 0.01362, "loss_rpn_bbox": 0.01319, "loss_cls": 0.14031, "acc": 94.15039, "loss_bbox": 0.32817, "loss_mask": 0.10774, "loss": 0.60303, "time": 0.18157}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.00061, "memory": 3931, "data_time": 0.01236, "loss_rpn_cls": 0.01535, "loss_rpn_bbox": 0.01004, "loss_cls": 0.14424, "acc": 95.66406, "loss_bbox": 0.36586, "loss_mask": 0.14698, "loss": 0.68248, "time": 0.18916}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00062, "bbox_mAP": 0.6116, "bbox_mAP_50": 0.8358, "bbox_mAP_75": 0.7691, "bbox_mAP_s": 0.0084, "bbox_mAP_m": 0.5299, "bbox_mAP_l": 0.6673, "bbox_mAP_copypaste": "0.6116 0.8358 0.7691 0.0084 0.5299 0.6673", "segm_mAP": 0.7472, "segm_mAP_50": 0.8301, "segm_mAP_75": 0.8276, "segm_mAP_s": 0.012, "segm_mAP_m": 0.7134, "segm_mAP_l": 0.7946, "segm_mAP_copypaste": "0.7472 0.8301 0.8276 0.0120 0.7134 0.7946"}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00067, "memory": 3931, "data_time": 0.23821, "loss_rpn_cls": 0.01203, "loss_rpn_bbox": 0.0155, "loss_cls": 0.13647, "acc": 96.26953, "loss_bbox": 0.36758, "loss_mask": 0.15058, "loss": 0.68217, "time": 0.42223}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00072, "memory": 3931, "data_time": 0.01142, "loss_rpn_cls": 0.00853, "loss_rpn_bbox": 0.00884, "loss_cls": 0.08951, "acc": 97.26562, "loss_bbox": 0.22146, "loss_mask": 0.09008, "loss": 0.41842, "time": 0.18889}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.00077, "memory": 3931, "data_time": 0.01241, "loss_rpn_cls": 0.01172, "loss_rpn_bbox": 0.01132, "loss_cls": 0.07948, "acc": 97.31445, "loss_bbox": 0.17024, "loss_mask": 0.08476, "loss": 0.35753, "time": 0.18983}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00077, "bbox_mAP": 0.7192, "bbox_mAP_50": 0.8698, "bbox_mAP_75": 0.8385, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.6645, "bbox_mAP_l": 0.7683, "bbox_mAP_copypaste": "0.7192 0.8698 0.8385 0.0757 0.6645 0.7683", "segm_mAP": 0.7803, "segm_mAP_50": 0.8698, "segm_mAP_75": 0.8661, "segm_mAP_s": 0.0289, "segm_mAP_m": 0.7069, "segm_mAP_l": 0.8337, "segm_mAP_copypaste": "0.7803 0.8698 0.8661 0.0289 0.7069 0.8337"}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.00082, "memory": 3931, "data_time": 0.24048, "loss_rpn_cls": 0.01149, "loss_rpn_bbox": 0.01035, "loss_cls": 0.06808, "acc": 97.51953, "loss_bbox": 0.11756, "loss_mask": 0.09126, "loss": 0.29874, "time": 0.42123}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.00087, "memory": 3931, "data_time": 0.0129, "loss_rpn_cls": 0.00744, "loss_rpn_bbox": 0.00938, "loss_cls": 0.07803, "acc": 97.26562, "loss_bbox": 0.13868, "loss_mask": 0.12991, "loss": 0.36344, "time": 0.19011}
{"mode": "train", "epoch": 6, "iter": 30, "lr": 0.00092, "memory": 3931, "data_time": 0.01387, "loss_rpn_cls": 0.00743, "loss_rpn_bbox": 0.01282, "loss_cls": 0.07932, "acc": 97.24609, "loss_bbox": 0.1022, "loss_mask": 0.08627, "loss": 0.28804, "time": 0.19015}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00093, "bbox_mAP": 0.7498, "bbox_mAP_50": 0.9018, "bbox_mAP_75": 0.842, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.6734, "bbox_mAP_l": 0.8064, "bbox_mAP_copypaste": "0.7498 0.9018 0.8420 0.0505 0.6734 0.8064", "segm_mAP": 0.8038, "segm_mAP_50": 0.8882, "segm_mAP_75": 0.8857, "segm_mAP_s": 0.0119, "segm_mAP_m": 0.7368, "segm_mAP_l": 0.855, "segm_mAP_copypaste": "0.8038 0.8882 0.8857 0.0119 0.7368 0.8550"}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.00098, "memory": 3931, "data_time": 0.23158, "loss_rpn_cls": 0.00433, "loss_rpn_bbox": 0.00803, "loss_cls": 0.05163, "acc": 98.22266, "loss_bbox": 0.0688, "loss_mask": 0.06271, "loss": 0.19551, "time": 0.41561}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.00103, "memory": 3931, "data_time": 0.01344, "loss_rpn_cls": 0.00838, "loss_rpn_bbox": 0.00882, "loss_cls": 0.06438, "acc": 97.80273, "loss_bbox": 0.10512, "loss_mask": 0.10534, "loss": 0.29203, "time": 0.19092}
{"mode": "train", "epoch": 7, "iter": 30, "lr": 0.00108, "memory": 3931, "data_time": 0.0123, "loss_rpn_cls": 0.0073, "loss_rpn_bbox": 0.0123, "loss_cls": 0.08027, "acc": 96.97266, "loss_bbox": 0.10976, "loss_mask": 0.10633, "loss": 0.31595, "time": 0.18798}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00108, "bbox_mAP": 0.7482, "bbox_mAP_50": 0.9114, "bbox_mAP_75": 0.8596, "bbox_mAP_s": 0.1262, "bbox_mAP_m": 0.6717, "bbox_mAP_l": 0.8051, "bbox_mAP_copypaste": "0.7482 0.9114 0.8596 0.1262 0.6717 0.8051", "segm_mAP": 0.8018, "segm_mAP_50": 0.9114, "segm_mAP_75": 0.8837, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.7165, "segm_mAP_l": 0.8587, "segm_mAP_copypaste": "0.8018 0.9114 0.8837 0.0252 0.7165 0.8587"}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.00113, "memory": 3931, "data_time": 0.24046, "loss_rpn_cls": 0.00695, "loss_rpn_bbox": 0.0078, "loss_cls": 0.05454, "acc": 98.00781, "loss_bbox": 0.08083, "loss_mask": 0.06939, "loss": 0.2195, "time": 0.42046}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.00118, "memory": 3931, "data_time": 0.01369, "loss_rpn_cls": 0.00544, "loss_rpn_bbox": 0.01189, "loss_cls": 0.06388, "acc": 97.53906, "loss_bbox": 0.0916, "loss_mask": 0.09532, "loss": 0.26813, "time": 0.19612}
{"mode": "train", "epoch": 8, "iter": 30, "lr": 0.00123, "memory": 3931, "data_time": 0.01138, "loss_rpn_cls": 0.00224, "loss_rpn_bbox": 0.00949, "loss_cls": 0.05561, "acc": 98.02734, "loss_bbox": 0.08521, "loss_mask": 0.07437, "loss": 0.22692, "time": 0.18643}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.7444, "bbox_mAP_50": 0.8997, "bbox_mAP_75": 0.8769, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.7128, "bbox_mAP_l": 0.7952, "bbox_mAP_copypaste": "0.7444 0.8997 0.8769 0.0000 0.7128 0.7952", "segm_mAP": 0.8027, "segm_mAP_50": 0.8997, "segm_mAP_75": 0.8805, "segm_mAP_s": 0.0, "segm_mAP_m": 0.7183, "segm_mAP_l": 0.8585, "segm_mAP_copypaste": "0.8027 0.8997 0.8805 0.0000 0.7183 0.8585"}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00129, "memory": 3931, "data_time": 0.25326, "loss_rpn_cls": 0.00386, "loss_rpn_bbox": 0.01354, "loss_cls": 0.08087, "acc": 96.74805, "loss_bbox": 0.10919, "loss_mask": 0.08956, "loss": 0.29702, "time": 0.45122}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.00134, "memory": 3931, "data_time": 0.01306, "loss_rpn_cls": 0.00467, "loss_rpn_bbox": 0.00889, "loss_cls": 0.05092, "acc": 98.05664, "loss_bbox": 0.07336, "loss_mask": 0.07552, "loss": 0.21336, "time": 0.1918}
{"mode": "train", "epoch": 9, "iter": 30, "lr": 0.00139, "memory": 3931, "data_time": 0.0108, "loss_rpn_cls": 0.00472, "loss_rpn_bbox": 0.00726, "loss_cls": 0.0457, "acc": 98.26172, "loss_bbox": 0.06568, "loss_mask": 0.07642, "loss": 0.19978, "time": 0.18015}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00139, "bbox_mAP": 0.7708, "bbox_mAP_50": 0.8999, "bbox_mAP_75": 0.8786, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6758, "bbox_mAP_l": 0.8361, "bbox_mAP_copypaste": "0.7708 0.8999 0.8786 0.0000 0.6758 0.8361", "segm_mAP": 0.8042, "segm_mAP_50": 0.8999, "segm_mAP_75": 0.8813, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6877, "segm_mAP_l": 0.8647, "segm_mAP_copypaste": "0.8042 0.8999 0.8813 0.0000 0.6877 0.8647"}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00144, "memory": 3931, "data_time": 0.2523, "loss_rpn_cls": 0.00282, "loss_rpn_bbox": 0.01274, "loss_cls": 0.06396, "acc": 97.55859, "loss_bbox": 0.09393, "loss_mask": 0.07142, "loss": 0.24487, "time": 0.44224}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.00149, "memory": 3931, "data_time": 0.0109, "loss_rpn_cls": 0.00281, "loss_rpn_bbox": 0.00603, "loss_cls": 0.04018, "acc": 98.57422, "loss_bbox": 0.06665, "loss_mask": 0.06694, "loss": 0.1826, "time": 0.18417}
{"mode": "train", "epoch": 10, "iter": 30, "lr": 0.00154, "memory": 3931, "data_time": 0.01206, "loss_rpn_cls": 0.00357, "loss_rpn_bbox": 0.00992, "loss_cls": 0.05711, "acc": 97.89062, "loss_bbox": 0.07745, "loss_mask": 0.09455, "loss": 0.24259, "time": 0.18307}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00155, "bbox_mAP": 0.7499, "bbox_mAP_50": 0.8953, "bbox_mAP_75": 0.8528, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6597, "bbox_mAP_l": 0.8174, "bbox_mAP_copypaste": "0.7499 0.8953 0.8528 0.0000 0.6597 0.8174", "segm_mAP": 0.7826, "segm_mAP_50": 0.8953, "segm_mAP_75": 0.8699, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6709, "segm_mAP_l": 0.8512, "segm_mAP_copypaste": "0.7826 0.8953 0.8699 0.0000 0.6709 0.8512"}
